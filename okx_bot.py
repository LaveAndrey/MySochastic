import sqlite3
from datetime import datetime

DB_NAME = "positions.db"

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –≤—ã–≤–æ–¥–æ–º —á–µ—Ä–µ–∑ print"""
    try:
        print(f"[INFO] üîß –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î {DB_NAME}")
        with sqlite3.connect(DB_NAME) as conn:
            table_info = conn.execute("""
                SELECT name, sql FROM sqlite_master 
                WHERE type='table' AND name='positions'
            """).fetchone()

            if not table_info:
                print("[INFO] üÜï –¢–∞–±–ª–∏—Ü–∞ positions –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é...")
                conn.execute("""
                    CREATE TABLE positions (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        symbol TEXT UNIQUE,
                        position_type TEXT,
                        entry_price REAL,
                        entry_time TEXT,
                        order_id TEXT,
                        closed INTEGER DEFAULT 0
                    );
                """)
                conn.execute("CREATE INDEX idx_symbol ON positions(symbol)")
                print("[INFO] ‚úÖ –¢–∞–±–ª–∏—Ü–∞ positions —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
                print("[DEBUG] –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:\n"
                      "id INTEGER PRIMARY KEY\n"
                      "symbol TEXT UNIQUE\n"
                      "position_type TEXT\n"
                      "entry_price REAL\n"
                      "entry_time TEXT\n"
                      "order_id TEXT\n"
                      "closed INTEGER DEFAULT 0")
            else:
                print(f"[INFO] ‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ positions —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {table_info[1]})")

        print(f"[INFO] üèÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {DB_NAME} –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
    except Exception as e:
        print(f"[ERROR] üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {str(e)}")

def has_open_position(symbol):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å –≤—ã–≤–æ–¥–æ–º —á–µ—Ä–µ–∑ print"""
    print(f"[DEBUG] üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}")
    try:
        with sqlite3.connect(DB_NAME) as conn:
            result = conn.execute("""
                SELECT COUNT(*) FROM positions 
                WHERE symbol=? AND closed=0
            """, (symbol,)).fetchone()

            if result[0] > 0:
                print(f"[INFO] ‚õî –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ {symbol}")
                details = conn.execute("""
                    SELECT entry_price, entry_time FROM positions 
                    WHERE symbol=? AND closed=0 LIMIT 1
                """, (symbol,)).fetchone()
                print(f"[DEBUG] –î–µ—Ç–∞–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ {symbol}: —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞={details[0]}, –≤—Ä–µ–º—è={details[1]}")
            else:
                print(f"[DEBUG] ‚úÖ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –ø–æ {symbol}")

            return result[0] > 0
    except Exception as e:
        print(f"[ERROR] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {str(e)}")
        return False

def get_price(market_api, ticker):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å –≤—ã–≤–æ–¥–æ–º —á–µ—Ä–µ–∑ print"""
    print(f"[DEBUG] üìä –ó–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã –¥–ª—è {ticker}")
    try:
        start_time = datetime.now()
        data = market_api.get_ticker(ticker)
        response_time = (datetime.now() - start_time).total_seconds()

        if data.get("code") == "0" and data.get("data"):
            price = float(data["data"][0]["last"])
            print(f"[INFO] üìà –¶–µ–Ω–∞ {ticker}: {price} (–≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.3f} —Å–µ–∫)")
            print(f"[DEBUG] –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API: {data}")
            return price
        else:
            print(f"[ERROR] ‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API: {data}")
            return 0.0
    except Exception as e:
        print(f"[ERROR] üî• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {ticker}: {str(e)}")
        return 0.0

def log_position(symbol, position_type, price, timestamp, order_id):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å –≤—ã–≤–æ–¥–æ–º —á–µ—Ä–µ–∑ print"""
    print(f"[INFO] –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é: {symbol} {position_type} –ø–æ {price}")
    print(f"[DEBUG] –î–µ—Ç–∞–ª–∏ –ø–æ–∑–∏—Ü–∏–∏:\n"
          f"Symbol: {symbol}\n"
          f"Type: {position_type}\n"
          f"Price: {price}\n"
          f"Time: {timestamp}\n"
          f"Order ID: {order_id}")

    try:
        with sqlite3.connect(DB_NAME) as conn:
            conn.execute("""
                INSERT INTO positions 
                (symbol, position_type, entry_price, entry_time, order_id)
                VALUES (?, ?, ?, ?, ?)
            """, (symbol, position_type, price, timestamp, order_id))
            print(f"[INFO] ‚úÖ –ü–æ–∑–∏—Ü–∏—è {symbol} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ë–î")
    except sqlite3.IntegrityError:
        print(f"[WARNING] ‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è {symbol} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î")
    except Exception as e:
        print(f"[ERROR] üî• –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–∑–∏—Ü–∏–∏: {str(e)}")
        raise

def place_buy_order(trade_api, account_api, market_api, symbol_dontclear, current_price, symbol, amount_usdt,
                    timestamp=None):
    """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É —Å –≤—ã–≤–æ–¥–æ–º —á–µ—Ä–µ–∑ print"""
    print(f"[INFO] –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∫—É–ø–∫–∏ {symbol} –Ω–∞ —Å—É–º–º—É {amount_usdt} USDT")

    if timestamp is None:
        timestamp = datetime.now().isoformat()
        print(f"[DEBUG] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {timestamp}")

    formatted_symbol = symbol.replace("-", "/")
    print(f"[DEBUG] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª: {formatted_symbol}")

    if has_open_position(formatted_symbol):
        print(f"[WARNING] ‚è∏Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∫—É–ø–∫—É {symbol} - –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞")
        return False

    print("[INFO] üîÑ –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É...")
    price = get_price(market_api, symbol)
    if price == 0:
        print("[ERROR] ‚ùå –ù—É–ª–µ–≤–∞—è —Ü–µ–Ω–∞, –æ—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏")
        return False

    print(f"[INFO] ‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É {symbol}...")
    try:
        start_time = datetime.now()
        order = trade_api.place_order(
            instId=symbol,
            tdMode="cash",
            side="buy",
            ordType="market",
            sz=str(amount_usdt)
        )
        response_time = (datetime.now() - start_time).total_seconds()

        print(f"[DEBUG] –û—Ç–≤–µ—Ç API (–≤—Ä–µ–º—è: {response_time:.3f} —Å–µ–∫): {order}")

        if order.get("code") == "0" and order.get("data"):
            ord_id = order["data"][0].get("ordId")
            print(f"[INFO] –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ {symbol}! Order ID: {ord_id}")
            log_position(formatted_symbol, "SPOT", price, timestamp, ord_id)
            return True
        else:
            print(f"[ERROR] ‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API: {order}")
            return False
    except Exception as e:
        print(f"[ERROR] üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {str(e)}")
        return False
