import threading
import time
from typing import Dict, Tuple
from datetime import datetime, timedelta
from notoficated import send_position_closed_message
import traceback
from typing import Optional
from decimal import Decimal, InvalidOperation
import sqlite3
from TimerStorage import TimerStorage
from DatabaseManger import DatabaseManager
from config import LEVERAGE


import logging
logger = logging.getLogger(__name__)

class PositionMonitor:
    def __init__(self, trade_api, account_api, market_api, close_after_minutes, profit_threshold,
                 on_position_closed=None, timer_storage=None, sheet_logger=None, db_path="positions.db"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π

        :param trade_api: API –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        :param account_api: API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º
        :param market_api: API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        :param close_after_minutes: –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
        :param profit_threshold: –ü—Ä–∏ –∫–∞–∫–æ–º –ø—Ä–æ—Ü–µ–Ω—Ç–µ –ø—Ä–∏–±—ã–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50%)
        """
        self.trade_api = trade_api
        self.account_api = account_api
        self.market_api = market_api
        self.price_cache = {}
        self.timers: Dict[str, threading.Timer] = {}
        self.close_after_seconds = close_after_minutes * 60
        self.profit_threshold = profit_threshold
        self.lock = threading.Lock()
        self.active_timers = {}
        self.timer_storage = timer_storage
        self.on_position_closed = on_position_closed or send_position_closed_message
        self.sheet_logger = sheet_logger
        self.timer_storage = timer_storage or TimerStorage()
        self._restore_timers()
        self.db = DatabaseManager(db_path)
        logger.info(
            f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –º–æ–Ω–∏—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–π: –∞–≤—Ç–æ-–∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ {close_after_minutes} –º–∏–Ω, —Ü–µ–ª—å –ø—Ä–∏–±—ã–ª–∏ {profit_threshold}%")

    def _restore_timers(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–≤ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        active_positions = self.timer_storage.get_active_positions()  # –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å dict symbol -> {'entry_time': float, 'elapsed_time': float}
        current_time = time.time()

        for symbol, data in active_positions.items():
            if not self.has_active_position(symbol):
                # –ï—Å–ª–∏ –≤ –ë–î —Ç–∞–π–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, —É–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                self.timer_storage.close_position(symbol)
                continue

            entry_time = data.get('entry_time')
            elapsed_time = data.get('elapsed_time', 0)

            # –í—Ä–µ–º—è, –ø—Ä–æ—à–µ–¥—à–µ–µ —Å –º–æ–º–µ–Ω—Ç–∞ entry_time
            real_elapsed = elapsed_time + (current_time - entry_time)
            remaining = self.close_after_seconds - real_elapsed

            if remaining <= 0:
                logger.info(f"[Timer] –í—Ä–µ–º—è —Ç–∞–π–º–µ—Ä–∞ –ø–æ {symbol} –∏—Å—Ç–µ–∫–ª–æ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏, –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é...")
                pos_type = self._get_position_type(symbol)
                self._close_position(symbol, pos_type)
                self.timer_storage.close_position(symbol)
            else:
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å –æ—Å—Ç–∞–≤—à–∏–º—Å—è –≤—Ä–µ–º–µ–Ω–µ–º
                self._start_timer(symbol, remaining)
                logger.info(f"[Timer] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞–π–º–µ—Ä {symbol}, –æ—Å—Ç–∞–ª–æ—Å—å: {remaining:.1f} —Å–µ–∫")

    def _start_timer(self, symbol: str, interval: Optional[float] = None):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–∑–∏—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞"""
        if interval is None:
            interval = self.close_after_seconds

        with self.lock:
            if symbol in self.timers:
                # –¢–∞–π–º–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω ‚Äî –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
                logger.info(f"[Timer] –¢–∞–π–º–µ—Ä –¥–ª—è {symbol} —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                return

            if not self.has_active_position(symbol):
                logger.info(f"[Timer] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}, —Ç–∞–π–º–µ—Ä –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–∑–∏—Ü–∏—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–∞–π–º–µ—Ä–æ–≤
            if self.timer_storage and self.timer_storage.has_position(symbol):
                logger.info(f"[Timer] –ü–æ–∑–∏—Ü–∏—è {symbol} —É–∂–µ –µ—Å—Ç—å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–∞–π–º–µ—Ä–æ–≤, —Ç–∞–π–º–µ—Ä –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º.")
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
                if self.timer_storage:
                    self.timer_storage.safe_add_position(symbol, time.time(), 0)
                    logger.info(f"[Timer] –ó–∞–ø–∏—Å–∞–ª–∏ –ø–æ–∑–∏—Ü–∏—é {symbol} –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–∞–π–º–µ—Ä–æ–≤.")

            pos_type = self._get_position_type(symbol)

            timer = threading.Timer(interval, self._close_position, args=(symbol, pos_type, None, None, None, None, "timeout"))
            timer.daemon = True
            timer.start()
            self.timers[symbol] = timer

            logger.info(f"[Timer] –ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è {symbol} –Ω–∞ {interval:.1f} —Å–µ–∫")

    def safe_add_position(self, symbol: str, entry_time: float, elapsed_time: float):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ç–∞–π–º–µ—Ä-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–¥—É–±–ª–∏ –Ω–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è)"""
        if not self.timer_storage:
            return
        if self.timer_storage.has_position(symbol):
            logger.info(f"[TimerStorage] –ü–æ–∑–∏—Ü–∏—è {symbol} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
            return
        self.timer_storage.safe_add_position(symbol, entry_time, elapsed_time)
        logger.info(f"[TimerStorage] –ü–æ–∑–∏—Ü–∏—è {symbol} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.")

    def has_active_position(self, symbol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏"""
        with sqlite3.connect("positions.db") as conn:
            result = conn.execute("""
                SELECT 1 FROM (
                    SELECT symbol FROM spot_positions WHERE symbol=? AND closed=0
                    UNION ALL
                    SELECT symbol FROM short_positions WHERE symbol=? AND closed=0
                ) LIMIT 1
            """, (symbol, symbol)).fetchone()
            return result is not None

    def stop_all_timers(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã, –Ω–æ –ù–ï —É–¥–∞–ª—è–µ—Ç –∏—Ö –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        for symbol, timer in list(self.timers.items()):
            timer.cancel()
        self.timers.clear()
        logger.info("–í—Å–µ —Ç–∞–π–º–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)")

    def _round_contract_size(self, symbol: str, amount: Decimal) -> str:
        try:
            instruments = self.account_api.get_instruments(instType="SWAP")
            for inst in instruments.get("data", []):
                if inst["instId"] == symbol:
                    lot_size = Decimal(inst["lotSz"])
                    rounded = (amount // lot_size) * lot_size
                    return str(rounded.normalize())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ {symbol}: {e}")
        return "0"

    def _check_position(self, symbol: str, current_price: Optional[Decimal] = None) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è SPOT –∏–ª–∏ SHORT –ø–æ–∑–∏—Ü–∏–∏ –ø–æ WebSocket"""
        try:
            with sqlite3.connect("positions.db") as conn:
                if "-SWAP" in symbol:
                    row = conn.execute("""
                        SELECT entry_price, 'short' AS type
                        FROM short_positions
                        WHERE symbol = ? AND closed = 0
                        LIMIT 1
                    """, (symbol,)).fetchone()
                else:
                    row = conn.execute("""
                        SELECT entry_price, 'spot' AS type
                        FROM spot_positions
                        WHERE symbol = ? AND closed = 0
                        LIMIT 1
                    """, (symbol,)).fetchone()

            if not row:
                return  # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏

            entry_price = Decimal(str(row[0]))
            pos_type = row[1]

            # üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            if current_price is None:
                current_price = self._get_current_price(symbol)
            else:
                current_price = Decimal(str(current_price))

            if not current_price:
                logger.warning(f"[WARN] –ù–µ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è {symbol}")
                return

            # üìä –†–∞—Å—á—ë—Ç PnL –≤ % –ø–æ —Ç–∏–ø—É –ø–æ–∑–∏—Ü–∏–∏
            if pos_type == "spot":
                profit_pct = ((current_price - entry_price) / entry_price) * 100
            elif pos_type == "short":
                profit_pct = ((entry_price - current_price) / entry_price) * 100 * Decimal(str(LEVERAGE))  # 4x –ø–ª–µ—á–æ
                #price_change_emoji = "üìâ" if profit_pct >= 0 else "üìà"
                #print(
                #    f"[SHORT] {symbol}: {price_change_emoji} {profit_pct:.2f}% (–í—Ö–æ–¥: {entry_price}, –¢–µ–∫—É—â–∞—è: {current_price})")
            else:
                logger.error(f"[ERROR] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∑–∏—Ü–∏–∏ {pos_type} –ø–æ {symbol}")
                return

            profit_pct = profit_pct.quantize(Decimal("0.01"))

            # üéØ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ —á–µ—Ä–µ–∑ —Ç–æ—á–Ω—ã–π PnL
            if profit_pct >= self.profit_threshold:
                if pos_type == "short":
                    pnl_data = self._get_swap_pnl_live(symbol)
                else:
                    pnl_data = self._get_spot_pnl_by_symbol(symbol)

                if not pnl_data:
                    logger.info(f"[SKIP] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—ã–π PnL –ø–æ {symbol}")
                    return

                net_pnl_usdt, confirmed_pct = pnl_data
                confirmed_pct = Decimal(str(confirmed_pct)).quantize(Decimal("0.01"))

                if confirmed_pct < self.profit_threshold:
                    return

                logger.info(f"[CONFIRMED] {symbol}: –ø—Ä–∏–±—ã–ª—å {confirmed_pct:.2f}% ‚â• {self.profit_threshold}%, –ó–ê–ö–†–´–í–ê–ï–ú...")
                self._close_position(symbol, pos_type, entry_price, current_price, pnl_data, confirmed_pct, reason="target")
                return

            # ‚è± –¢–∞–π–º–µ—Ä (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
            if symbol not in self.timers:
                self._start_timer(symbol, self.close_after_seconds)

        except Exception as e:
            logger.error(f"[ERROR] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ {symbol} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {e}")

    def _get_current_price(self, symbol: str) -> Optional[Decimal]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–µ—à–∞"""
        try:
            if symbol in self.price_cache:
                return self.price_cache[symbol]

            data = self.market_api.get_ticker(symbol)
            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç OKX –¥–ª—è {symbol}: {data}")

            if data.get("code") == "0" and data.get("data"):
                price = Decimal(data["data"][0]["last"])
                self.price_cache[symbol] = price
                return price

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
        return None

    def _get_order_id_from_db(self, symbol: str, pos_type: str) -> Optional[str]:
        table = "spot_positions" if pos_type == "spot" else "short_positions"
        try:
            with sqlite3.connect("positions.db") as conn:
                row = conn.execute(f"""
                    SELECT order_id FROM {table} WHERE symbol = ? AND closed = 0 LIMIT 1
                """, (symbol,)).fetchone()
                return row[0] if row else None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ order_id –∏–∑ –ë–î –¥–ª—è {symbol}: {e}")
            return None

    def _close_position(self, symbol: str, pos_type: str,
                        entry_price: Optional[float] = None,
                        current_price: Optional[float] = None,
                        pnl: Optional[float] = None,
                        profit_pct: Optional[float] = None,
                        reason: str = None):
        try:
            with self.lock:

                if symbol in self.timers:
                    self.timers[symbol].cancel()
                    del self.timers[symbol]

                if self.timer_storage:
                    self.timer_storage.close_position(symbol)


            if reason is None:
                if pos_type == "spot":
                    reason = "timeout"  # –î–ª—è SPOT —Ç–æ–ª—å–∫–æ timeout
                elif pos_type == "short":
                    if profit_pct and profit_pct >= self.profit_threshold:
                        reason = "target"
                    else:
                        reason = "timeout"

            logger.debug(f"[DEBUG] –ó–∞–∫—Ä—ã—Ç–∏–µ {symbol} ({pos_type}), reason: {reason}")

            if not self.has_active_position(symbol):
                logger.info(f"[Close] –ü–æ–∑–∏—Ü–∏—è {symbol} —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞, –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –∑–∞–∫—Ä—ã—Ç–∞ –ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –±–∏—Ä–∂–µ
            if pos_type == "short":
                amount, pos_side = self._get_contract_balance(symbol)
                if amount == 0:
                    logger.info(f"[INFO] SHORT –ø–æ–∑–∏—Ü–∏—è {symbol} —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ –Ω–∞ –±–∏—Ä–∂–µ. –û–±–Ω–æ–≤–ª—è–µ–º –ë–î.")
                    self._update_position_in_db(symbol, pos_type, self._get_order_id_from_db(symbol, pos_type), reason)
                    return
            else:
                base_ccy = symbol.split("-")[0]
                balance = self._get_balance(base_ccy)
                if balance == 0:
                    logger.info(f"[INFO] SPOT –ø–æ–∑–∏—Ü–∏—è {symbol} —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞. –û–±–Ω–æ–≤–ª—è–µ–º –ë–î.")
                    self._update_position_in_db(symbol, pos_type, self._get_order_id_from_db(symbol, pos_type), reason)
                    return

            # –ü–æ–ª—É—á–∞–µ–º order_id –∏–∑ –ë–î
            with sqlite3.connect("positions.db") as conn:
                table = "spot_positions" if pos_type == "spot" else "short_positions"
                row = conn.execute(f"""
                    SELECT order_id FROM {table}
                    WHERE symbol = ? AND closed = 0
                    LIMIT 1
                """, (symbol,)).fetchone()

                if row is None:
                    logger.error(f"[ERROR] –ü–æ–∑–∏—Ü–∏—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ {table} –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.")
                    return

                order_id = row[0]

            logger.debug(f"[DEBUG] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: –¢–∏–ø={pos_type}, OrderID={order_id}")

            # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            if pos_type == "spot":
                base_ccy = symbol.split("-")[0]
                balance = self._get_balance(base_ccy)
                if balance <= 0:
                    logger.warning(f"[ABORT] –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å {balance} –¥–ª—è SPOT {symbol}.")
                    return

                sz = str(balance.quantize(Decimal('0.00000001')))
                order = self.trade_api.place_order(
                    instId=symbol,
                    tdMode="cash",
                    side="sell",
                    ordType="market",
                    sz=sz
                )
            else:
                amount, pos_side = self._get_contract_balance(symbol)
                if amount <= 0:
                    logger.warning(f"[ABORT] –ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å SHORT –¥–ª—è {symbol}.")
                    return

                sz = self._round_contract_size(symbol, amount)
                order = self.trade_api.place_order(
                    instId=symbol,
                    tdMode="isolated",
                    side="buy" if pos_side == "short" else "sell",
                    posSide=pos_side,
                    ordType="market",
                    sz=sz,
                    reduceOnly=True
                )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if order.get("code") == "0":
                if not order.get("data"):
                    logger.warning(f"[WARNING] –û—Ä–¥–µ—Ä –∑–∞–∫—Ä—ã—Ç —É—Å–ø–µ—à–Ω–æ, –Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ: {order}")
                else:
                    real_order_id = order["data"][0].get("ordId", order_id)
                    logger.info(f"[SUCCESS] –û—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {real_order_id}")
                time.sleep(2)

                self._update_position_in_db(symbol, pos_type, order_id, reason)

                data_to_log = {
                    "symbol": symbol,
                    "pos_type": pos_type,
                    "entry_price": entry_price,
                    "close_price": current_price,
                    "pnl_usd": pnl,
                    "pnl_percent": profit_pct,
                    "reason": reason
                }

                logger.debug(f"[DEBUG] –î–∞–Ω–Ω—ã–µ –¥–ª—è Google Sheets: {data_to_log}")

                if self.sheet_logger:
                    success = self.sheet_logger.log_closed_position(data_to_log)
                    if not success:
                        logger.warning(f"[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é {symbol} –≤ Google Sheets")
                else:
                    logger.warning("[WARNING] –õ–æ–≥–≥–µ—Ä Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        finally:
            with sqlite3.connect("timers.db") as conn:
                conn.execute("DELETE FROM active_timers WHERE symbol=?", (symbol,))

    def _get_balance(self, currency: str) -> Decimal:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤–∞–ª—é—Ç—ã –¥–ª—è spot"""
        try:
            logger.info(f"–ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {currency}...")
            res = self.account_api.get_account_balance(ccy=currency)

            # –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            logger.info(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –±–∞–ª–∞–Ω—Å–∞: {res}")

            if res.get("code") != "0":
                logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {res.get('msg')} | full: {res}")
                return Decimal("0")

            # –î–ª—è –¥–µ–º–æ-—Å—á–µ—Ç–∞ –ø—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
            demo_data = res.get("data", [{}])[0].get("details", [{}])
            if demo_data:
                balance_str = demo_data[0].get("availBal", "0")
            else:
                balance_str = res.get("data", [{}])[0].get("availBal", "0")

            try:
                return Decimal(balance_str)
            except InvalidOperation:
                return Decimal("0")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {currency}: {e}")
            return Decimal("0")

    def _update_position_in_db(self, symbol: str, pos_type: str, order_id: Optional[str], reason: str = None):
        try:
            logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –ë–î –¥–ª—è {symbol} ({pos_type}), order_id={order_id}")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price = self._get_current_price(symbol)
            if not current_price:
                logger.error(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}")
                current_price = Decimal("0")

            # –ü–æ–ª—É—á–∞–µ–º PnL
            if pos_type == "spot":
                pnl_data = self._get_spot_pnl_by_symbol(symbol) or (Decimal("0"), Decimal("0"))
            else:
                pnl_data = self._get_realized_pnl(symbol, pos_type)

            pnl_usdt, pnl_percent = pnl_data

            fee = self._get_fee_for_position(symbol, pos_type, order_id)

            # –ü–æ–ª—É—á–∞–µ–º entry_price –∏–∑ –ë–î
            with sqlite3.connect("positions.db") as conn:
                table = "spot_positions" if pos_type == "spot" else "short_positions"
                row = conn.execute(
                    f"SELECT entry_price FROM {table} WHERE order_id = ?",
                    (order_id,)
                ).fetchone()

                if not row:
                    row = conn.execute(
                        f"SELECT entry_price FROM {table} WHERE symbol = ? AND closed = 0",
                        (symbol,)
                    ).fetchone()

                entry_price = float(row[0]) if row else 0.0

            # –§–æ—Ä–º–∏—Ä—É–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Google –¢–∞–±–ª–∏—Ü
            data_to_log = {
                "symbol": symbol,
                "pos_type": pos_type,
                "entry_price": float(entry_price),
                "close_price": float(current_price),
                "pnl_usd": float(pnl_usdt) if pnl_usdt else 0.0,
                "pnl_percent": float(pnl_percent) if pnl_percent else 0.0,
                "fee": float(fee),
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "reason": reason or ""
            }

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Google –¢–∞–±–ª–∏—Ü—ã
            for key, value in data_to_log.items():
                if value is None:
                    logger.warning(f"[WARNING] {key} is None, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 0")
                    data_to_log[key] = 0.0


            # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
            with sqlite3.connect("positions.db") as conn:
                conn.execute(f"""
                    UPDATE {table}
                    SET pnl_usdt = ?, pnl_percent = ?, exit_price = ?, closed = 1, exit_time = ?, reason = ?, fee = ?
                    WHERE order_id = ?
                """, (
                    float(pnl_usdt),
                    float(pnl_percent),
                    float(current_price),
                    datetime.now().isoformat(),
                    reason,
                    float(fee),
                    order_id,
                ))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Google –¢–∞–±–ª–∏—Ü—ã
            if self.sheet_logger:
                logger.debug(f"[DEBUG] –î–∞–Ω–Ω—ã–µ –¥–ª—è Google –¢–∞–±–ª–∏—Ü: {data_to_log}")
                self.sheet_logger.log_closed_position(data_to_log)

            if self.on_position_closed:
                self.on_position_closed(
                    symbol,
                    entry_price,
                    float(current_price),
                    float(pnl_percent),
                    float(pnl_usdt),
                    reason,
                    float(fee))

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ PNL –¥–ª—è {symbol}: {str(e)}")
            traceback.print_exc()

    def _get_spot_pnl_by_symbol(self, symbol: str) -> tuple[Decimal, Decimal] | None:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç PNL –ø–æ —Å–∏–º–≤–æ–ª—É (—Å–ø–æ—Ç)"""
        try:
            with sqlite3.connect("positions.db") as conn:
                row = conn.execute("""
                    SELECT entry_price, amount 
                    FROM spot_positions 
                    WHERE symbol = ? AND closed = 0
                    LIMIT 1
                """, (symbol,)).fetchone()

            if not row:
                return None

            entry_price = Decimal(str(row[0]))
            amount = Decimal(str(row[1]))
            if entry_price <= 0 or amount <= 0:
                logger.error(f"[ERROR] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ PNL –¥–ª—è {symbol}: entry={entry_price}, amount={amount}")
                return None

            current_price = self._get_current_price(symbol)
            if not current_price:
                return None

            pnl_usdt = (current_price - entry_price) * amount
            pnl_percent = ((current_price - entry_price) / entry_price) * 100
            return pnl_usdt, pnl_percent

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Å–ø–æ—Ç-PNL: {str(e)}")
            return None

    def _get_decimal_safe(self, value) -> Decimal:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ Decimal, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å"""
        try:
            return Decimal(str(value))
        except (InvalidOperation, TypeError, ValueError):
            logger.error(f"[Decimal Error] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ: {value}")
            return Decimal("0")

    def _calculate_fallback_pnl(self, symbol: str) -> Optional[Tuple[Decimal, Decimal]]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç PnL –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î, –µ—Å–ª–∏ API –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª"""
        try:
            with sqlite3.connect("positions.db") as conn:
                # –î–ª—è SWAP-–ø–æ–∑–∏—Ü–∏–π
                row = conn.execute("""
                    SELECT entry_price, amount FROM short_positions
                    WHERE symbol = ? AND closed = 0 LIMIT 1
                """, (symbol,)).fetchone()

                if not row:
                    logger.error(f"[ERROR] –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è {symbol} –≤ –ë–î")
                    return None

                entry_price, amount = Decimal(str(row[0])), Decimal(str(row[1]))
                current_price = self._get_current_price(symbol)

                if not current_price:
                    logger.error(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è {symbol}")
                    return None

                # –†–∞—Å—á—ë—Ç PnL –¥–ª—è SHORT
                pnl_usdt = (entry_price - current_price) * amount
                pnl_percent = ((entry_price - current_price) / entry_price) * 100 * 4  # 4x –ø–ª–µ—á–æ

                logger.info(f"[FALLBACK] –†–∞—Å—á—ë—Ç–Ω—ã–π PnL –¥–ª—è {symbol}: "
                      f"{pnl_percent:.2f}% ({pnl_usdt:.4f} USDT)")
                return pnl_usdt, pnl_percent

        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ PnL: {str(e)}")
            return None

    def _get_swap_pnl_live(self, symbol: str, max_retries: int = 3) -> Optional[Tuple[Decimal, Decimal]]:
        retry_count = 0
        last_exception = None

        while retry_count < max_retries:
            try:
                res = self.account_api.get_positions(instType="SWAP")
                if res.get("code") != "0":
                    raise ValueError(f"API error: {res.get('msg', 'Unknown error')}")

                for pos in res.get("data", []):
                    normalized_api_symbol = pos["instId"].replace("-USD-", "-USDT-")
                    if normalized_api_symbol == symbol:
                        upl = Decimal(str(pos.get("upl", "0")))
                        upl_ratio = Decimal(str(pos.get("uplRatio", "0"))) * 100
                        return upl, upl_ratio

                # –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –±—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –æ—à–∏–±–∫—É
                logger.info(f"[INFO] –ü–æ–∑–∏—Ü–∏—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ API (–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ –ª–∏–∫–≤–∏–¥–∏—Ä–æ–≤–∞–Ω–∞).")
                return None


            except Exception as e:
                last_exception = e
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è PnL (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}): {str(e)}")
                traceback.print_exc()
                retry_count += 1
                time.sleep(1 * retry_count)

        logger.error(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å PnL –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {str(last_exception)}")
        return None

    def _get_contract_balance(self, symbol: str) -> Tuple[Decimal, str]:
        try:
            logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–π –¥–ª—è {symbol}...")
            res = self.account_api.get_positions(instType="SWAP")

            if res.get("code") == "0":
                for position in res.get("data", []):
                    if position["instId"] == symbol:
                        pos_amount_str = position.get("pos") or position.get("availPos") or "0"
                        pos_side = position.get("posSide", "net")
                        return Decimal(pos_amount_str), pos_side
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
        return Decimal("0"), "net"

    def _get_realized_pnl(self, symbol: str, pos_type: str) -> Tuple[Decimal, Decimal]:
        try:
            if pos_type == "short":
                res = self.account_api.get_positions_history(instType="SWAP", instId=symbol)
                if res.get("code") == "0" and res.get("data"):
                    last_closed = res["data"][0]
                    pnl_usdt = Decimal(last_closed.get("pnl", "0"))
                    pnl_percent = Decimal(last_closed.get("pnlRatio", "0")) * 100
                    return pnl_usdt, pnl_percent
            else:
                # –î–ª—è spot-–ø–æ–∑–∏—Ü–∏–π —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PNL –≤—Ä—É—á–Ω—É—é
                with sqlite3.connect("positions.db") as conn:
                    row = conn.execute("""
                        SELECT entry_price, amount FROM spot_positions
                        WHERE symbol=? AND closed=0 LIMIT 1
                    """, (symbol,)).fetchone()
                    if row:
                        entry_price = Decimal(str(row[0]))
                        amount = Decimal(str(row[1]))
                        current_price = self._get_current_price(symbol)
                        if current_price:
                            pnl_usdt = (current_price - entry_price) * amount
                            pnl_percent = ((current_price - entry_price) / entry_price) * 100
                            return pnl_usdt, pnl_percent
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ PNL: {e}")
        return Decimal("0"), Decimal("0")

    def _get_position_type(self, symbol: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        with sqlite3.connect("positions.db") as conn:
            spot = conn.execute(
                "SELECT 1 FROM spot_positions WHERE symbol=? AND closed=0",
                (symbol,)
            ).fetchone()
            return "spot" if spot else "short"

    def _get_fee_for_position(self, symbol: str, pos_type: str, order_id: str) -> Decimal:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—É–º–º—É –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if pos_type == "spot":
                # –ò—â–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ (fills) –∫–æ–º–∏—Å—Å–∏—é –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ—Ä–¥–µ—Ä—É
                res = self.trade_api.get_fills(instId=symbol, limit=50)
                if res.get("code") == "0" and res.get("data"):
                    for fill in res["data"]:
                        if fill.get("ordId") == order_id:
                            fee_str = fill.get("fee", "0")
                            print(fee_str)
                            return Decimal(fee_str) if fee_str else Decimal("0")
            else:
                # –î–ª—è SWAP –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∑–∏—Ü–∏–π
                res = self.account_api.get_positions_history(instType="SWAP", instId=symbol, limit=5)
                if res.get("code") == "0" and res.get("data"):
                    # –ú–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ ordId, –µ—Å–ª–∏ –ø–æ–≤–µ–∑—ë—Ç, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é
                    for position in res["data"]:
                        if position.get("ordId") == order_id:
                            fee_str = position.get("fee", "0")
                            print(fee_str)
                            return Decimal(fee_str) if fee_str else Decimal("0")
                    # fallback: –ø–æ—Å–ª–µ–¥–Ω—è—è
                    fee_str = res["data"][0].get("fee", "0")
                    return Decimal(fee_str) if fee_str else Decimal("0")
            return Decimal("0")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è {symbol}: {e}")
            return Decimal("0")




