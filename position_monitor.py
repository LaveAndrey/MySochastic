import logging
import sqlite3
from datetime import datetime, timedelta
from decimal import Decimal
from threading import Thread
import time

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger("PositionMonitor")


class PositionMonitor:
    def __init__(self, trade_api, account_api, market_api):
        self.trade_api = trade_api
        self.account_api = account_api
        self.market_api = market_api
        self.running = False
        self.thread = None
        self.price_cache = {}

    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.running:
            return

        self.running = True
        self.thread = Thread(target=self._monitor_loop, daemon=True)
        self.thread.start()
        logger.info("üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π –∑–∞–ø—É—â–µ–Ω")

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.running = False
        if self.thread:
            self.thread.join()
        logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def _monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.running:
            try:
                self._check_position()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    def _check_position(self, symbol, current_price=None, entry_price=None, entry_time=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏–∑–≤–Ω–µ"""
        if current_price is None:
            current_price = self._get_current_price(symbol)
        if not current_price:
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
        if entry_price is None or entry_time is None:
            with sqlite3.connect("positions.db") as conn:
                row = conn.execute("""
                    SELECT entry_price, entry_time FROM positions 
                    WHERE symbol=? AND closed=0 LIMIT 1
                """, (symbol,)).fetchone()
                if not row:
                    return
                entry_price, entry_time = row

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã
        price_increase = (current_price - Decimal(str(entry_price))) / Decimal(str(entry_price)) * 100
        if price_increase >= 50:
            logger.info(f"üöÄ {symbol}: —Ä–æ—Å—Ç –Ω–∞ {price_increase:.2f}%")
            self._close_position(symbol)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è
        hold_time = datetime.now() - datetime.fromisoformat(entry_time)
        if hold_time >= timedelta(minutes=5):
            logger.info(f"‚è≥ {symbol}: –ø—Ä–æ—à–ª–æ {hold_time.days} –¥–Ω–µ–π")
            self._close_position(symbol)

    def _get_current_price(self, symbol):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É"""
        try:
            data = self.market_api.get_ticker(symbol)
            if data.get("code") == "0" and data.get("data"):
                return Decimal(data["data"][0]["last"])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol}: {e}")
        return None

    def _close_position(self, symbol):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é"""
        base_ccy = symbol.split("-")[0]
        balance = self._get_balance(base_ccy)

        if balance <= 0:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç {base_ccy} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")
            return

        order = self.trade_api.place_order(
            instId=symbol,
            tdMode="cash",
            side="sell",
            ordType="market",
            sz=str(round(balance, 6))
        )

        if order.get("code") == "0":
            with sqlite3.connect("positions.db") as conn:
                conn.execute("""
                    UPDATE positions SET closed=1 
                    WHERE symbol=? AND closed=0
                """, (symbol,))
            logger.info(f"‚úÖ {symbol}: –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {order}")

    def _get_balance(self, currency):
        """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –≤–∞–ª—é—Ç—ã"""
        try:
            res = self.account_api.get_balance(ccy=currency)
            if res.get("code") == "0":
                for entry in res.get("data", []):
                    if entry.get("ccy") == currency:
                        return Decimal(entry.get("availBal", "0"))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ {currency}: {e}")
        return Decimal("0")
