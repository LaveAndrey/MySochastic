import os
import time
import sqlite3
import requests
import pandas as pd
from datetime import datetime, time as dtime
import pytz
from typing import Optional, List, Tuple
from concurrent.futures import ThreadPoolExecutor
from telegram import Bot
import asyncio
from get_klines import get_klines
from calculate_k import calculate_k
from analytiv import analyze_pairs
from okx_bot import (
    init_db, has_open_position, get_price,
    log_position, place_buy_order
)
from dotenv import load_dotenv
from okx.Trade import TradeAPI
from okx.Account import AccountAPI
from okx.MarketData import MarketAPI
from webdocket.Websocket_manager import CustomWebSocket
from position_monitor import PositionMonitor
from decimal import *

load_dotenv()

API_KEY = os.getenv('API_KEY_DEMO')
API_SECRET = os.getenv('API_SECRET_DEMO')
PASSPHRASE = os.getenv('PASSPHRASE_DEMO')
IS_DEMO = True


trade_api = TradeAPI(API_KEY, API_SECRET, PASSPHRASE, IS_DEMO, domain="https://www.okx.com")
account_api = AccountAPI(API_KEY, API_SECRET, PASSPHRASE, IS_DEMO, domain="https://www.okx.com")
market_api = MarketAPI(API_KEY, API_SECRET, PASSPHRASE, IS_DEMO, domain="https://www.okx.com")
position_monitor = PositionMonitor(trade_api, account_api, market_api)

def handle_ws_message(data):
    if "data" not in data:
        return
    for ticker in data["data"]:
        symbol = ticker["instId"]
        current_price = Decimal(ticker["last"])
        # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ PositionMonitor
        print(f"WebSocket: {ticker['instId']} = {ticker['last']}")
        position_monitor._check_position(symbol, current_price)



# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
INTERVAL = '1m'
K_PERIOD = 14
TIMEZONE = pytz.timezone('Europe/Moscow')
UPDATE_TIMES = [dtime(0, 56), dtime(0, 58), dtime(1, 0), dtime(1, 2)]
DB_NAME = "signals.db"
COINS_FILE = "coins_list"
MAX_WORKERS = 10

# === Telegram Bot config ===
TELEGRAM_TOKEN = "7729090833:AAExQZN8WQUoI0RBeNPRqxnRZzlQRpqn-s4"
TELEGRAM_CHAT_ID = "-1002782313628"
bot = Bot(token=TELEGRAM_TOKEN)


# === –õ–æ–≥–≥–µ—Ä ===

def get_current_price(symbol: str) -> float:  # ‚úÖ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    okx_USDT = f"{symbol}-USDT"
    url = f"https://www.okx.com/api/v5/market/ticker?instId={okx_USDT}"

    log(f"üì° –ó–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã –ø–æ URL: {url}", "info")

    response = requests.get(url)
    data = response.json()
    if not data.get("data"):
        raise ValueError(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {symbol}: {data}")
    return float(data["data"][0]["last"])


def log(message: str, level: str = "info"):
    timestamp = datetime.now(TIMEZONE).strftime('%Y-%m-%d %H:%M:%S')
    icons = {"error": "‚ùå", "warning": "‚ö†Ô∏è", "success": "‚úÖ", "info": "‚ÑπÔ∏è"}
    print(f"{icons.get(level, '')} [{timestamp}] {message}")

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–Ω–µ—Ç ===
def is_valid_pair(symbol):
    try:
        url = f"https://api.binance.com/api/v3/exchangeInfo?symbol={symbol}USDT"
        return requests.get(url).status_code == 200
    except:
        return False

def load_symbols():
    with open(COINS_FILE) as f:
        return [s.strip() for s in f if is_valid_pair(s.strip())]


# === –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Binance ===

# === –†–∞—Å—á—ë—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ %K ===

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ %K –≤ –ë–î (–±–µ–∑ —Å–∏–≥–Ω–∞–ª–∞) ===
def save_to_db(symbol: str, timestamp: str, k: float):
    try:
        now = datetime.now(TIMEZONE)
        table_name = f"signals_{now.strftime('%Y_%m_%d')}"
        with sqlite3.connect(DB_NAME) as conn:
            # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
            conn.execute(f"""
                CREATE TABLE IF NOT EXISTS "{table_name}" (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    symbol TEXT,
                    timestamp TEXT,
                    k_value REAL,
                    processed INTEGER DEFAULT 0
                );
            """)
            if k is not None:  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                conn.execute(f"""
                    INSERT INTO "{table_name}" (symbol, timestamp, k_value)
                    VALUES (?, ?, ?)
                """, (symbol, timestamp, k))
        log(f"{symbol}: ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {table_name} | %K={k:.2f}", "success")
    except Exception as e:
        log(f"{symbol}: ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}", "error")


# === –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –ø–æ –¥–≤—É–º –∑–Ω–∞—á–µ–Ω–∏—è–º %K ===
def determine_signal(k_prev: float, k_curr: float) -> str:
    arrow = "‚Üë" if k_curr > k_prev else "‚Üì" if k_curr < k_prev else "‚Üí"
    message = f"%K: {k_prev:.2f} {arrow} {k_curr:.2f}"

    if k_prev < 20 and k_curr >= 20:
        log(f"{message} ‚Äî üîº BUY —Å–∏–≥–Ω–∞–ª", "success")
        return "BUY"
    elif k_prev > 80 and k_curr <= 80:
        log(f"{message} ‚Äî üîΩ SELL —Å–∏–≥–Ω–∞–ª", "success")
        return "SELL"
    else:
        log(f"{message} ‚Äî HOLD", "info")
        return "HOLD"

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å —Å–∏–≥–Ω–∞–ª–æ–º ===

def send_signal_message(symbol: str, signal: str, k_prev: float, k_curr: float, ts_prev: str, ts_curr: str):
    arrows = "üìà" if signal == "BUY" else "üìâ" if signal == "SELL" else "‚û°Ô∏è"
    signal_emoji = "üü¢ –ü–æ–∫—É–ø–∫–∞" if signal == "BUY" else "üü° –î–µ—Ä–∂–∞—Ç—å"  # –£–±—Ä–∞–ª–∏ "üî¥ –ü—Ä–æ–¥–∞–∂–∞"

    message = (
        f"‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ {symbol}*\n"
        f"%K –∏–∑–º–µ–Ω–∏–ª—Å—è: {k_prev:.2f} ‚Üí {k_curr:.2f} {arrows}\n"
        f"–î–µ–π—Å—Ç–≤–∏–µ: *{'–ü–æ–∫—É–ø–∫–∞' if signal == 'BUY' else '–î–µ—Ä–∂–∏–º'}*"
    )

    try:
        if signal == "BUY":
            current_price = get_current_price(symbol)
            okx_symbol = f"{symbol}-USDT"
            success = place_buy_order(trade_api, account_api, market_api, symbol, okx_symbol,
                                      amount_usdt=10, timestamp=datetime.now().isoformat())
            if success:
                log(f"{symbol}: üü¢ –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ {current_price}", "success")
                time.sleep(0.5)
                position_monitor._check_position(okx_symbol, current_price)


    except Exception as e:
        log(f"{symbol}: ‚ùå –û—à–∏–±–∫–∞: {e}", "error")


async def _send_message_async(text: str):
    try:
        await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=text, parse_mode="Markdown")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}", "error")


def send_telegram_message(text: str):
    try:
        asyncio.run(_send_message_async(text))
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(_send_message_async(text))
        loop.close()




# === –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä –∑–Ω–∞—á–µ–Ω–∏–π %K –∏ –∑–∞–ø–∏—Å—å –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ ===

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã ===
def process_symbol(symbol: str):
    df = get_klines(symbol, log, TIMEZONE, INTERVAL, K_PERIOD)
    if df is None:
        return "error"

    k, ts = calculate_k(symbol, df, K_PERIOD, log)
    if k is None or ts is None:
        return "warning"

    save_to_db(symbol, ts.isoformat(), k)
    return "success"

# === –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ ===
def wait_until_next_update():
    now = datetime.now(TIMEZONE)
    next_update = min(
        (TIMEZONE.localize(datetime.combine(now.date(), t))
         for t in UPDATE_TIMES
         if TIMEZONE.localize(datetime.combine(now.date(), t)) > now),
        default=TIMEZONE.localize(datetime.combine(now.date() + pd.Timedelta(days=1), UPDATE_TIMES[0]))
    )
    wait_seconds = (next_update - now).total_seconds()
    log(f"–ñ–¥–µ–º {wait_seconds:.0f} —Å–µ–∫—É–Ω–¥ –¥–æ {next_update.time()}")
    time.sleep(wait_seconds)


# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ===
def main():
    try:
        init_db()
        wait_until_next_update()
        symbols = load_symbols()
        okx_symbols = [f"{s}-USDT" for s in symbols]

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket
        ws_manager = CustomWebSocket(
            symbols=okx_symbols,
            callback=handle_ws_message,
        )
        ws_thread = ws_manager.run_in_thread()
        log("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥-WebSocket –ø–æ–∑–∏—Ü–∏–π –∑–∞–ø—É—â–µ–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)", "success")

        while True:
            log("–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")

            symbols = load_symbols()
            if not symbols:
                log("–°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –ø—É—Å—Ç. –û–∂–∏–¥–∞–µ–º...", "warning")
                time.sleep(60)
                continue

            with ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
                results = list(executor.map(process_symbol, symbols))
                log(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len([r for r in results if r == 'success'])}/{len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤", "info")

            analyze_pairs(DB_NAME, TIMEZONE, log, determine_signal, send_signal_message)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º —Å–∏–º–≤–æ–ª–∞–º, —É –∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è
            with sqlite3.connect("positions.db") as conn:
                open_positions = conn.execute("""
                    SELECT symbol FROM positions WHERE closed = 0
                """).fetchall()

                for row in open_positions:
                    symbol = row[0]
                    try:
                        current_price = get_current_price(symbol.replace("-USDT", ""))
                        if current_price:
                            position_monitor._check_position(symbol, Decimal(current_price))
                    except Exception as e:
                        log(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}", "error")

            wait_until_next_update()
    except KeyboardInterrupt:
        log("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏", "warning")
    except Exception as e:
        log(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}", "error")
    finally:
        ws_manager.stop()
        log("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "info")
        log("–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "success")


if __name__ == "__main__":
    main()
